# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, run tests, and push the Docker image to Docker Hub
name: AI School Frontend Deployment

on:
   push:
      branches: ["main"]
   pull_request:
      branches: ["main"]

jobs:
   lint:
      runs-on: ubuntu-latest
      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Setup Node.js
           uses: actions/setup-node@v4
           with:
              node-version: 20.x
              cache: "npm"

         - name: Install dependencies
           run: npm ci

         - name: Run ESLint
           run: npm run lint

   build:
      runs-on: ubuntu-latest
      needs: lint

      strategy:
         matrix:
            node-version: [20.x]

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Use Node.js ${{ matrix.node-version }}
           uses: actions/setup-node@v4
           with:
              node-version: ${{ matrix.node-version }}
              cache: "npm"

         - name: Install dependencies
           run: npm ci

         - name: Build application
           run: npm run build --if-present

         - name: Run tests
           run: npm test

   docker-push:
      runs-on: ubuntu-latest
      needs: build

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Log in to Docker Hub
           uses: docker/login-action@v2
           with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Build Docker image
           run: |
              docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/ai-school:${{ github.sha }} .
              docker tag ${{ secrets.DOCKER_USERNAME }}/ai-school:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ai-school:latest

         - name: Push Docker image
           run: |
              docker push ${{ secrets.DOCKER_USERNAME }}/ai-school:${{ github.sha }} || exit 1
              docker push ${{ secrets.DOCKER_USERNAME }}/ai-school:latest || exit 1
   server-deploy:
      runs-on: ubuntu-latest
      needs: docker-push
      steps:
         - name: ssh to server
           env:
              SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
              SERVER_IP: ${{ secrets.SERVER_IP }}
              SERVER_USER: ${{ secrets.SERVER_USER }}
           run: |
              echo "$SERVER_PRIVATE_KEY" | tr -d '\r' > private_key
              chmod 600 private_key
              ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_IP << 'EOF'
                cd /var/www/school
                docker compose down && docker compose up -d --pull always
              EOF

              # Clean up the temporary key file
              rm -f private_key
